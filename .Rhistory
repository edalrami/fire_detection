Sxy = sum(xy)
Sx = sum(points[,1])
Sy = sum(points[,2])
x2 = points[,1]^2
Sx2 = sum(x2)
n = 3
b1 = (Sxy - (Sx*Sy)/n)/(Sx2 - (Sx^2)/n)
b0 = (1/n)*(Sy - b1*Sx)
b1
b0
y_hat = b0 + b1*points[,1]
y_hat
b0 + b1*5
#Question 7: Determine the standard error of the estimate
points = matrix(c(3,2,4,8,4,6), ncol = 2)
y_hat = 3 + points[,1]
y_hat
SSE = sum((points[,2] - y_hat)^2)
SSE
sE = sqrt(SSE/1)
sE
#Question 5
points = matrix(c(5,3,4, -5,0,-6), ncol = 2)
points
xy = points[,1] * points[,2]
Sxy = sum(xy)
Sx = sum(points[,1])
Sy = sum(points[,2])
x2 = points[,1]^2
Sx2 = sum(x2)
n = 3
b1 = (Sxy - (Sx*Sy)/n)/(Sx2 - (Sx^2)/n)
b0 = (1/n)*(Sy - b1*Sx)
b1
b0
y_hat = b0 + b1*points[,1]
y_hat
y_p = b0 + b1*5
y_p
SSE = sum((points[,2] - y_hat)^2)
sE = sqrt(SSE)
left = y_p + sE*sqrt((1 + (1/3) + ((5 - mean(points[,1]))^2/Sx2)))
left
right = y_p - sE*sqrt((1 + (1/3) + ((5 - mean(points[,1]))^2/Sx2)))
right
m = lm(points[,2]~points[,1], ddata = points)
m = lm(points[,2]~points[,1], data = points)
points = as.data.frame(points)
colnames(points) = c(x,y)
colnames(points) = c("x","y")
m = lm(y ~ x, data = points)
library("stats")
X = data.frame(x = 5)
predict(m,x, interval = "confidence")
predict(m,X, interval = "confidence")
predict(m, X, interval = "prediction")
points
sE
y_p
setwd("C:/Users/edalr/Desktop/school/researchmethods/final/fire_detection")
install.packages("dummies")
install.packages("tidyr")
install.packages("ggcorrplot")
install.packages("car")
#reading in all the packages reqired for the report
library(dummies)
library(ggcorrplot)
library(dplyr)
library(tidyr)
library(ggplot2)
library(corrplot)
#reading in the csv file
dataset <- read.csv('forestfires.csv')
#displaying first 5 rows
head(dataset)
#reading in all the packages reqired for the report
library(dummies)
library(ggcorrplot)
library(dplyr)
library(tidyr)
library(ggplot2)
library(corrplot)
#reading in the csv file
dataset <- read.csv('forestfires.csv')
#displaying first 5 rows
head(dataset)
# Lets get a brief summary of our dataset
summary(dataset)
#1  Converting text datetime data to numbers
month_nums <-  c('jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct',
'nov', 'dec')
# determining Portugal seasons based on the months
spring <- c('mar', 'apr', 'may')
summer <- c('jun', 'jul', 'aug')
autumn <- c('sep', 'oct','nov')
winter <- c('dec','jan', 'feb')
#looping over the month data in the file and converting them to the appropriate season
for ( month in dataset$month) {
if (any(spring==month)) {
seasons <- c(seasons,'spring')
} else if (any(summer==month)) {
seasons <- c(seasons,'summer')
} else if (any(autumn==month)) {
seasons <- c(seasons,'autumn')
} else if (any(winter==month)) {
seasons <- c(seasons,'winter')
}
}
# initializing empty list to append the season to based on months
seasons <- c()
#looping over the month data in the file and converting them to the appropriate season
for ( month in dataset$month) {
if (any(spring==month)) {
seasons <- c(seasons,'spring')
} else if (any(summer==month)) {
seasons <- c(seasons,'summer')
} else if (any(autumn==month)) {
seasons <- c(seasons,'autumn')
} else if (any(winter==month)) {
seasons <- c(seasons,'winter')
}
}
#attaching the seasons column to the dataset
dataset <- cbind(dataset, seasons)
#checking if seasons and respective months match appropriately
head(dataset$month)
head(seasons)
#2. Removing redundant data
#1. dropping the original months column
#2. dropping the "day" column
dataset <- dataset[,-match(c("month","day", 'X', 'Y'),names(dataset))]
dataset1 <- dataset
#Next we need to convert our seasons variables (categorical) into binary representations of the same
dataset <- dummy.data.frame(dataset)
invisible(get.dummy( dataset, 'seasons' ))
#3. Normalizing our dataset
dataset <- as.data.frame(apply(dataset, 2, function(x) (x - min(x))/(max(x)-min(x))))
str(dataset)
#3. Normalizing our dataset
dataset <- as.data.frame(apply(dataset, 2, function(x) (x - min(x))/(max(x)-min(x))))
str(dataset)
# setting a variable to be used later in a plot
plott <- dataset
#reading in the csv file
dataset <- read.csv('forestfires.csv')
#displaying first 5 rows
head(dataset)
# Lets get a brief summary of our dataset
summary(dataset)
#1  Converting text datetime data to numbers
month_nums <-  c('jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct',
'nov', 'dec')
# determining Portugal seasons based on the months
spring <- c('mar', 'apr', 'may')
summer <- c('jun', 'jul', 'aug')
autumn <- c('sep', 'oct','nov')
winter <- c('dec','jan', 'feb')
# initializing empty list to append the season to based on months
seasons <- c()
#looping over the month data in the file and converting them to the appropriate season
for ( month in dataset$month) {
if (any(spring==month)) {
seasons <- c(seasons,'spring')
} else if (any(summer==month)) {
seasons <- c(seasons,'summer')
} else if (any(autumn==month)) {
seasons <- c(seasons,'autumn')
} else if (any(winter==month)) {
seasons <- c(seasons,'winter')
}
}
#attaching the seasons column to the dataset
dataset <- cbind(dataset, seasons)
#checking if seasons and respective months match appropriately
head(dataset$month)
colnames(dataset)
#reading in all the packages reqired for the report
library(dummies)
library(ggcorrplot)
library(dplyr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(leaps)
#reading in the csv file
dataset <- read.csv('forestfires.csv')
#displaying first 5 rows
head(dataset)
#displaying first 5 rows
head(dataset)
# Lets get a brief summary of our dataset
summary(dataset)
#1  Converting text datetime data to numbers
month_nums <-  c('jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct',
'nov', 'dec')
# determining Portugal seasons based on the months
spring <- c('mar', 'apr', 'may')
summer <- c('jun', 'jul', 'aug')
autumn <- c('sep', 'oct','nov')
winter <- c('dec','jan', 'feb')
# initializing empty list to append the season to based on months
seasons <- c()
#looping over the month data in the file and converting them to the appropriate season
for ( month in dataset$month) {
if (any(spring==month)) {
seasons <- c(seasons,'spring')
} else if (any(summer==month)) {
seasons <- c(seasons,'summer')
} else if (any(autumn==month)) {
seasons <- c(seasons,'autumn')
} else if (any(winter==month)) {
seasons <- c(seasons,'winter')
}
}
#attaching the seasons column to the dataset
dataset <- cbind(dataset, seasons)
#feature selection: Forward
allSubset = regsubsets(DC ~., data = dataset, method = "forward")
(s = summary(allSubset))
s$adjr2
#feature selection: Forward
allSubset = regsubsets(ISI ~., data = dataset, method = "forward")
colnames(dataset)
#feature selection: Forward
allSubset = regsubsets(ISI ~ X + Y + area + temp + RH + wind + rain +DC, data = dataset, method = "forward")
(s = summary(allSubset))
s$adjr2
colnames(dataset)
#feature selection: Forward
allSubset = regsubsets(ISI ~ FFMC + DMC + X + Y + area + temp + RH + wind + rain +DC, data = dataset, method = "forward")
(s = summary(allSubset))
s$adjr2
colnames(dataset)
#feature selection: Forward
allSubset = regsubsets(ISI ~ seasons + FFMC + DMC + X + Y + area + temp + RH + wind + rain +DC, data = dataset, method = "forward")
(s = summary(allSubset))
s$adjr2
colnames(dataset)
#feature selection: Forward
allSubset = regsubsets(ISI ~ month + seasons + FFMC + DMC + X + Y + area + temp + RH + wind + rain +DC, data = dataset, method = "forward")
#feature selection: Forward
allSubset = regsubsets(ISI ~ month + FFMC + DMC + X + Y + area + temp + RH + wind + rain +DC, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(DC ~ month + FFMC + DMC + X + Y + area + temp + RH + wind + rain, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
colnames(dataset)
#feature selection: Forward
allSubset = regsubsets(DC ~ temp + rain, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(DC ~ temp + rain + ISI, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(DC ~ temp + rain + ISI + DMC, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(DC ~ DMC, data = dataset, method = "forward")
s = summary(allSubset)
#feature selection: Forward
allSubset = regsubsets(DC ~ DMC, data = dataset, method = "forward")
#feature selection: Forward
allSubset = regsubsets(DC ~ temp + DMC, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(FFMC ~ DC + DMC, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(FFMC ~ DC + DMC + ISI, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(DC ~ FFMC + DMC + ISI, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(DC ~ FFMC + DMC + ISI + temp + rain + wind, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(DC ~ FFMC + DMC + ISI + temp + rain + wind + seasons, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
colnames(dataset)
#feature selection: Forward
allSubset = regsubsets(DC ~ FFMC + DMC + ISI + temp + rain + wind + RH, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(DC ~ FFMC + DMC + ISI + temp + rain + wind + RH + X + Y, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(ISI ~ ., data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(DC ~ ., data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(DC ~ FFMC + RH, data = dataset, method = "forward")
#feature selection: Forward
allSubset = regsubsets(DC ~ FFMC + seasons, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
#feature selection: Forward
allSubset = regsubsets(DC ~ FFMC + seasons, data = dataset, method = "forward")
s = summary(allSubset)
s$adjr2
(s = summary(allSubset))
#feature selection: Forward
allSubset = regsubsets(DC ~ FFMC + month, data = dataset, method = "forward")
(s = summary(allSubset))
#feature selection: Forward
allSubset = regsubsets(DC ~ FFMC + seasons, data = dataset, method = "forward")
(s = summary(allSubset))
s$adjr2
#feature selection: Forward
allSubset = regsubsets(DC ~ FFMC + seasons + DMC, data = dataset, method = "forward")
(s = summary(allSubset))
s$adjr2
dataset$ISI
max(dataset$ISI)
max(dataset$DC)
#reading in the csv file
dataset <- read.csv('forestfires.csv')
#displaying first 5 rows
head(dataset)
# Lets get a brief summary of our dataset
summary(dataset)
spring <- c('mar', 'apr', 'may')
summer <- c('jun', 'jul', 'aug')
autumn <- c('sep', 'oct','nov')
winter <- c('dec','jan', 'feb')
season = function(x){
if(x %in% spring){
return(1)
} else if(x %in% summer){
return(2)
} else if(x %in% autumn){
return(3)
} else{
return(4)
}
}
week = function(x){
if(x == 'mon'){
return(1)
} else if(x == 'tue'){
return(2)
} else if(x == 'wed'){
return(3)
} else if(x == 'thu'){
return(4)
} else if(x == 'fri'){
return(5)
} else if(x == 'sat'){
return(6)
} else{
return(7)
}
}
dataset$month = sapply(dataset$month, season)
dataset$day = sapply(dataset$day, week)
colnames(dataset)
#feature selection: Forward
allSubset = regsubsets(DC ~ ., data = dataset, method = "forward")
(s = summary(allSubset))
s$adjr2
colnames(dataset)
#feature selection: Forward
allSubset = regsubsets(DC ~ month + day + FFMC + DMC + DC + ISI + temp + RH + wind + rain + area, data = dataset, method = "forward")
#feature selection: Forward
allSubset = regsubsets(DC ~ month + day + FFMC + DMC + ISI + temp + RH + wind + rain + area, data = dataset, method = "forward")
(s = summary(allSubset))
s$adjr2
#feature selection: Forward
allSubset = regsubsets(ISI ~ month + day + FFMC + DMC + DC + temp + RH + wind + rain + area, data = dataset, method = "forward")
(s = summary(allSubset))
s$adjr2
#feature selection: Forward
allSubset = regsubsets(ISI ~ ., data = dataset, method = "forward")
(s = summary(allSubset))
s$adjr2
#check normality of response
trans = log(dataset$ISI)
trans[380] = 0
hist(trans)
abline(v = mean(trans), col = 'red')
library("stats")
hist(trans)
abline(v = mean(trans), col = 'red')
#reading in all the packages reqired for the report
library(ggcorrplot)
library(ggplot2)
library(corrplot)
library(leaps)
#reading in the csv file
dataset <- read.csv('forestfires.csv')
#displaying first 5 rows
head(dataset)
# Lets get a brief summary of our dataset
summary(dataset)
spring <- c('mar', 'apr', 'may')
summer <- c('jun', 'jul', 'aug')
autumn <- c('sep', 'oct','nov')
winter <- c('dec','jan', 'feb')
season = function(x){
if(x %in% spring){
return(1)
} else if(x %in% summer){
return(2)
} else if(x %in% autumn){
return(3)
} else{
return(4)
}
}
week = function(x){
if(x == 'mon'){
return(1)
} else if(x == 'tue'){
return(2)
} else if(x == 'wed'){
return(3)
} else if(x == 'thu'){
return(4)
} else if(x == 'fri'){
return(5)
} else if(x == 'sat'){
return(6)
} else{
return(7)
}
}
dataset$month = sapply(dataset$month, season)
dataset$day = sapply(dataset$day, week)
library("stats")
#check normality of response
trans = log(dataset$ISI)
trans[380] = 0
hist(trans)
abline(v = mean(trans), col = 'red')
#reading in all the packages reqired for the report
library(ggcorrplot)
library(dplyr)
library(ggplot2)
library(corrplot)
library(leaps)
#reading in the csv file
fire <- read.csv('forestfires.csv')
spring <- c('mar', 'apr', 'may')
summer <- c('jun', 'jul', 'aug')
autumn <- c('sep', 'oct','nov')
winter <- c('dec','jan', 'feb')
#clean data
#change month and day into numeric
season = function(x){
if(x %in% spring){
return(1)
} else if(x %in% summer){
return(2)
} else if(x %in% autumn){
return(3)
} else{
return(4)
}
}
week = function(x){
if(x == 'mon'){
return(1)
} else if(x == 'tue'){
return(2)
} else if(x == 'wed'){
return(3)
} else if(x == 'thu'){
return(4)
} else if(x == 'fri'){
return(5)
} else if(x == 'sat'){
return(6)
} else{
return(7)
}
}
fire$month = sapply(fire$month, season)
fire$day = sapply(fire$day, week)
#check correlation and also you can see distribution of variable by this plot
library("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
#check correlation and also you can see distribution of variable by this plot
library("PerformanceAnalytics")
chart.Correlation(fire, histogram=TRUE, pch=19)
#check normality of response
#obviously this is right skewed
#violate assumption, so we need to transformed data
#acutally if you don't transform data, R^2 is low for best subset features
hist(fire$ISI)
#transform data by taking log
trans = log(fire$ISI)
trans[380] = 0
hist(trans)
abline(v = mean(trans), col = 'red')
abline(v = median(trans), col = 'blue')
